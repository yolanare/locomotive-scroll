{"version":3,"file":"locomotive-scroll.umd.js","sources":["../core/IO.ts","../utils/maths.ts","../core/ScrollElement.ts","../core/Core.ts","../core/RO.ts","../index.ts"],"sourcesContent":["/**\r\n * Intersection Observer\r\n *\r\n * Detecting visibility of an element in the viewport.\r\n *\r\n * Features functions to:\r\n *\r\n * - Trigger inview/outOfView callbacks\r\n * - If the element has a requestAnimationFrame dependency, set interactivy status for the ScrollElement Class\r\n *\r\n * References:\r\n *\r\n * - {@link https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API}\r\n */\r\n\r\nimport type { IIOOptions } from '../types';\r\nimport ScrollElement from './ScrollElement';\r\n\r\nexport default class IO {\r\n    public scrollElements: ScrollElement[];\r\n    private rootMargin: string;\r\n    private IORaf: boolean;\r\n    private observer!: IntersectionObserver;\r\n\r\n    constructor({\r\n        scrollElements,\r\n        rootMargin = '-1px -1px -1px -1px',\r\n        IORaf,\r\n    }: IIOOptions) {\r\n        // Parameters\r\n        this.scrollElements = scrollElements;\r\n        this.rootMargin = rootMargin;\r\n        this.IORaf = IORaf;\r\n\r\n        // Init\r\n        this._init();\r\n    }\r\n\r\n    /**\r\n     * Lifecyle - Initialize Intersection Observer.\r\n     *\r\n     * @private\r\n     */\r\n    private _init() {\r\n        // Options\r\n        const observerOptions = {\r\n            rootMargin: this.rootMargin,\r\n        };\r\n\r\n        // Callback\r\n        const onIntersect = (entries: IntersectionObserverEntry[]) => {\r\n            entries.forEach((entry) => {\r\n                const $targetItem: ScrollElement | undefined =\r\n                    this.scrollElements.find(\r\n                        (item) => item.$el === entry.target\r\n                    );\r\n\r\n                if (entry.isIntersecting) {\r\n                    $targetItem && ($targetItem.isAlreadyIntersected = true);\r\n                    this._setInview(entry);\r\n                } else if ($targetItem && $targetItem.isAlreadyIntersected) {\r\n                    this._setOutOfView(entry);\r\n                }\r\n            });\r\n        };\r\n\r\n        // Instance\r\n        this.observer = new IntersectionObserver(onIntersect, observerOptions);\r\n\r\n        // Observe each default elements\r\n        for (const scrollElement of this.scrollElements) {\r\n            const $scrollElement = scrollElement.$el;\r\n            this.observe($scrollElement);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Lifecyle - Destroy Intersection Observer.\r\n     */\r\n    public destroy() {\r\n        this.observer.disconnect();\r\n    }\r\n\r\n    /**\r\n     * Subscribe element to the Intersection Observer.\r\n     *\r\n     * @param {HTMLElement} $scrollElement - DOM Element to observe.\r\n     */\r\n    public observe($scrollElement: HTMLElement) {\r\n        if (!$scrollElement) {\r\n            return;\r\n        }\r\n\r\n        this.observer.observe($scrollElement);\r\n    }\r\n\r\n    /**\r\n     * Unsubscribe element to the Intersection Observer.\r\n     *\r\n     * @param {HTMLElement} $scrollElement - DOM Element to unobserve.\r\n     */\r\n    public unobserve($scrollElement: HTMLElement) {\r\n        if (!$scrollElement) {\r\n            return;\r\n        }\r\n\r\n        this.observer.unobserve($scrollElement);\r\n    }\r\n\r\n    /**\r\n     * Find ScrollElementReference instance and trigger inview callbacks.\r\n     *\r\n     * @private\r\n     *\r\n     * @param {IntersectionObserverEntry} entry - DOM Element to observe.\r\n     */\r\n    private _setInview(entry: IntersectionObserverEntry) {\r\n        const scrollElement = this.scrollElements.find(\r\n            (scrollElement) => scrollElement.$el === entry.target\r\n        );\r\n\r\n        this.IORaf && scrollElement?.setInteractivityOn();\r\n        !this.IORaf && scrollElement?.setInview();\r\n    }\r\n\r\n    /**\r\n     * Find ScrollElementReference instance and trigger out of view callbacks.\r\n     *\r\n     * @private\r\n     *\r\n     * @param {IntersectionObserverEntry} entry - DOM Element to observe.\r\n     */\r\n    private _setOutOfView(entry: IntersectionObserverEntry) {\r\n        const scrollElement = this.scrollElements.find(\r\n            (scrollElement) => scrollElement.$el === entry.target\r\n        );\r\n\r\n        this.IORaf && scrollElement?.setInteractivityOff();\r\n        !this.IORaf && scrollElement?.setOutOfView();\r\n\r\n        // Unobserve if element doesn't have repeat attribute\r\n        if (!scrollElement?.attributes.scrollRepeat && !this.IORaf) {\r\n            this.unobserve(entry.target as HTMLElement);\r\n        }\r\n    }\r\n}\r\n","// https://greensock.com/docs/v3/GSAP/gsap.utils\r\n\r\n/**\r\n * Clamp a value to fit within a specific range (ex: clamp(0, 100, -12) --> 0).\r\n *\r\n * @param {number} min   - Minimum value expected.\r\n * @param {number} max   - Maximum value expected.\r\n * @param {number} value - Current value.\r\n *\r\n * @returns {number} - Clamped value.\r\n */\r\nexport function clamp(min: number, max: number, value: number): number {\r\n    return value < min ? min : value > max ? max : value;\r\n}\r\n\r\n/**\r\n * Map one range to another (ex: mapRange(-10, 10, 0, 100, 5) --> 75).\r\n *\r\n * @param {number} inMin  - Current minimum value.\r\n * @param {number} inMax  - Current maximum value.\r\n * @param {number} outMin - Maximum value expected.\r\n * @param {number} outMax - Maximum value expected.\r\n * @param {number} value  - Current value.\r\n *\r\n * @returns {number} - New value that should be between minimum value expected and maximum value.\r\n */\r\nexport function mapRange(\r\n    inMin: number,\r\n    inMax: number,\r\n    outMin: number,\r\n    outMax: number,\r\n    value: number\r\n): number {\r\n    const inRange = inMax - inMin;\r\n    const outRange = outMax - outMin;\r\n    return outMin + (((value - inMin) / inRange) * outRange || 0);\r\n}\r\n\r\n/**\r\n * Map a number within a range to a progress between 0 to 1 (ex: normalize(100, 200, 150) --> 0.5).\r\n *\r\n * @param {number} min   - Current minimum value.\r\n * @param {number} max   - Current maximum value.\r\n * @param {number} value - Current value.\r\n *\r\n * @returns {number} - New value that should be between 0 and 1.\r\n */\r\nexport function normalize(min: number, max: number, value: number): number {\r\n    return mapRange(min, max, 0, 1, value);\r\n}\r\n\r\n/**\r\n * Get closest number from an array.\r\n *\r\n * @param {number[]} array  - Numbers array.\r\n * @param {number}   target - Reference value.\r\n *\r\n * @returns {number} - Closest number.\r\n */\r\nexport function closestNumber(array: number[], target: number): number {\r\n    return array.reduce((prev, curr) => {\r\n        return Math.abs(curr - target) < Math.abs(prev - target) ? curr : prev;\r\n    });\r\n}\r\n","/**\r\n * Scroll Element\r\n *\r\n * Give tools to compute element progress in the viewport and triggers callbacks to animate it.\r\n *\r\n * Features functions to:\r\n *\r\n * - scrollClass - Add a custom class when the element is intersected by the offset\r\n * - scrollOffset - Determine offsets to intersect the element\r\n * - scrollPosition - Determine the element positions to consider an element as intersected.\r\n * - scrollModuleProgress - Send scroll progress to modular module that have a specific method (PROGRESS_MODULAR_METHOD)\r\n * - scrollCssProgress - Add a specific css variable (PROGRESS_CSS_VAR) that store the scroll progress\r\n * - scrollEventProgress - Send scroll progress to custom event listeners.\r\n * - scrollSpeed - Add a scroll multiplicator to create a parallax effect\r\n * + scrollParallaxSideways - Translates the scroll parallax direction to be sideways from the scroll orientation.\r\n * + scrollParallaxClamp - Clamps the scroll parallax to the origin position of the element, negative or positive (-/+).\r\n * - scrollRepeat - Repeat the option to trigger animation each time the element is intersected\r\n * - scrollCall - Call a custom event or a modular callback when the element is intersected\r\n */\r\n\r\nimport type {\r\n    IModular,\r\n    IScrollElementOptions,\r\n    IScrollElementAttributes,\r\n    IScrollElementIntersection,\r\n    IScrollElementMetrics,\r\n    IProgressModularModules,\r\n    IScrollElementCallbacksValues,\r\n    scrollCallWay,\r\n    scrollCallFrom,\r\n    scrollOrientation,\r\n} from '../types';\r\nimport { clamp, closestNumber, normalize, mapRange } from '../utils/maths';\r\n\r\n/** Constants */\r\nconst INVIEW_CLASS = 'is-inview';\r\nconst PROGRESS_CSS_VAR = '--progress';\r\nconst PROGRESS_MODULAR_METHOD = 'onScrollProgress';\r\n\r\nexport default class ScrollElement {\r\n    public $el: HTMLElement;\r\n    public id: number;\r\n    public needRaf: boolean;\r\n    public attributes: IScrollElementAttributes;\r\n    public scrollOrientation: scrollOrientation;\r\n    public isAlreadyIntersected: boolean;\r\n\r\n    private intersection: IScrollElementIntersection;\r\n    private metrics: IScrollElementMetrics;\r\n    private currentScroll: number;\r\n    private translateValue: number;\r\n    private progress: number;\r\n    private lastProgress: number | null;\r\n    private modularInstance?: IModular;\r\n    private progressModularModules: IProgressModularModules[];\r\n    private isInview: boolean;\r\n    private isInteractive: boolean;\r\n    private isInFold: boolean;\r\n    private isFirstResize: boolean;\r\n\r\n    private subscribeElementUpdateFn: (scrollElement: ScrollElement) => void;\r\n    private unsubscribeElementUpdateFn: (scrollElement: ScrollElement) => void;\r\n\r\n    constructor({\r\n        $el,\r\n        id,\r\n        modularInstance,\r\n        subscribeElementUpdateFn,\r\n        unsubscribeElementUpdateFn,\r\n        needRaf,\r\n        scrollOrientation,\r\n    }: IScrollElementOptions) {\r\n        // Scroll DOM element\r\n        this.$el = $el;\r\n        // Unique ID\r\n        this.id = id;\r\n        // RAF option\r\n        this.needRaf = needRaf;\r\n        // Scroll Direction\r\n        this.scrollOrientation = scrollOrientation;\r\n        // Modular.js\r\n        this.modularInstance = modularInstance;\r\n        // Parent's callbacks\r\n        this.subscribeElementUpdateFn = subscribeElementUpdateFn;\r\n        this.unsubscribeElementUpdateFn = unsubscribeElementUpdateFn;\r\n\r\n        // Attributes\r\n        this.attributes = {\r\n            scrollClass: this.$el.dataset['scrollClass'] ?? INVIEW_CLASS,\r\n            scrollOffset: this.$el.dataset['scrollOffset'] ?? '0,0',\r\n            scrollPosition: this.$el.dataset['scrollPosition'] ?? 'start,end',\r\n            scrollModuleProgress:\r\n                this.$el.dataset['scrollModuleProgress'] != null,\r\n            scrollCssProgress: this.$el.dataset['scrollCssProgress'] != null,\r\n            scrollEventProgress:\r\n                this.$el.dataset['scrollEventProgress'] ?? null,\r\n            scrollSpeed:\r\n                this.$el.dataset['scrollSpeed'] != null\r\n                    ? parseFloat(this.$el.dataset['scrollSpeed'])\r\n                    : null,\r\n            scrollParallaxSideways: this.$el.dataset['scrollParallaxSideways'] != null,\r\n            scrollParallaxClamp: this.$el.dataset['scrollParallaxClamp'] ?? null,\r\n            scrollRepeat: this.$el.dataset['scrollRepeat'] != null,\r\n            scrollCall: this.$el.dataset['scrollCall'] ?? null,\r\n            scrollCallSelf: this.$el.dataset['scrollCallSelf'] != null,\r\n            scrollIgnoreFold: this.$el.dataset['scrollIgnoreFold'] != null,\r\n            scrollEnableTouchSpeed:\r\n                this.$el.dataset['scrollEnableTouchSpeed'] != null,\r\n        };\r\n\r\n        // Limits\r\n        this.intersection = {\r\n            start: 0,\r\n            end: 0,\r\n        };\r\n\r\n        // Metrics\r\n        this.metrics = {\r\n            offsetStart: 0,\r\n            offsetEnd: 0,\r\n            bcr: {} as DOMRect,\r\n        };\r\n\r\n        // Scroll Values\r\n        this.currentScroll =\r\n            this.scrollOrientation === 'vertical'\r\n                ? window.scrollY\r\n                : window.scrollX;\r\n\r\n        // Parallax\r\n        this.translateValue = 0;\r\n\r\n        // Progress\r\n        this.progress = 0;\r\n        this.lastProgress = null;\r\n        this.progressModularModules = [];\r\n\r\n        // Inview\r\n        this.isInview = false;\r\n        this.isInteractive = false;\r\n        this.isAlreadyIntersected = false;\r\n        this.isInFold = false;\r\n        this.isFirstResize = true;\r\n\r\n        // Init\r\n        this._init();\r\n    }\r\n\r\n    /**\r\n     * Lifecyle - Initialize progress tracking.\r\n     *\r\n     * @private\r\n     */\r\n    private _init() {\r\n        if (!this.needRaf) {\r\n            return;\r\n        }\r\n\r\n        // Prepare modules progress\r\n        if (this.modularInstance && this.attributes.scrollModuleProgress) {\r\n            this._getProgressModularModules();\r\n        }\r\n\r\n        // First resize to compute all values\r\n        this._resize();\r\n    }\r\n\r\n    /**\r\n     * Callback - Resize callback\r\n     */\r\n    public onResize({ currentScroll }: IScrollElementCallbacksValues) {\r\n        this.currentScroll = currentScroll;\r\n        this._resize();\r\n    }\r\n\r\n    /**\r\n     * Callback - RAF callback\r\n     */\r\n    public onRender({ currentScroll, smooth }: IScrollElementCallbacksValues) {\r\n        const wSize =\r\n            this.scrollOrientation === 'vertical'\r\n                ? window.innerHeight\r\n                : window.innerWidth;\r\n        this.currentScroll = currentScroll;\r\n        this._computeProgress();\r\n\r\n        // Parallax\r\n        if (\r\n            this.attributes.scrollSpeed &&\r\n            !isNaN(this.attributes.scrollSpeed)\r\n        ) {\r\n            // if touch detected or smooth disabled\r\n            if (!this.attributes.scrollEnableTouchSpeed && !smooth) {\r\n                if (this.translateValue) {\r\n                    this.$el.style.transform = `translate3d(0, 0, 0)`;\r\n                }\r\n                this.translateValue = 0;\r\n\r\n                // if mousewheel or smooth enabled\r\n            } else {\r\n                // Check fold condition\r\n                if (this.isInFold) {\r\n                    const progress = Math.max(0, this.progress);\r\n                    this.translateValue =\r\n                        progress * wSize * this.attributes.scrollSpeed * -1;\r\n                } else {\r\n                    let progress = mapRange(0, 1, -1, 1, this.progress);\r\n\r\n                    switch (this.attributes.scrollParallaxClamp) {\r\n                        case '+':\r\n                            progress = Math.max(progress, 0);\r\n                            break;\r\n\r\n                        case '-':\r\n                            progress = Math.min(progress, 0);\r\n                            break;\r\n                    }\r\n\r\n                    this.translateValue =\r\n                        progress * wSize * this.attributes.scrollSpeed * -1;\r\n                }\r\n\r\n                this.$el.style.transform = `translate3d(${\r\n                    this.scrollOrientation === 'vertical'\r\n                        ? this.attributes.scrollParallaxSideways\r\n                            ? `${this.translateValue}px, 0`\r\n                            : `0, ${this.translateValue}px`\r\n                        : this.attributes.scrollParallaxSideways\r\n                            ? `0, ${this.translateValue}px`\r\n                            : `${this.translateValue}px, 0`\r\n                }, 0)`;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Inview callback\r\n     */\r\n    public setInview() {\r\n        if (this.isInview) {\r\n            return;\r\n        }\r\n\r\n        this.isInview = true;\r\n        this.$el.classList.add(this.attributes.scrollClass);\r\n\r\n        const way: scrollCallWay = 'enter';\r\n        const from: scrollCallFrom = this._getScrollCallFrom();\r\n        this.attributes.scrollCall && this._dispatchCall(way, from);\r\n    }\r\n\r\n    /**\r\n     * Out of view callback\r\n     */\r\n    public setOutOfView() {\r\n        if (!(this.isInview && this.attributes.scrollRepeat)) {\r\n            return;\r\n        }\r\n\r\n        this.isInview = false;\r\n        this.$el.classList.remove(this.attributes.scrollClass);\r\n\r\n        const way: scrollCallWay = 'leave';\r\n        const from: scrollCallFrom = this._getScrollCallFrom();\r\n        this.attributes.scrollCall && this._dispatchCall(way, from);\r\n    }\r\n\r\n    /**\r\n     * Switch interactivity on to subscribe the instance to the RAF\r\n     * and start calculations.\r\n     */\r\n    public setInteractivityOn() {\r\n        if (this.isInteractive) {\r\n            return;\r\n        }\r\n\r\n        this.isInteractive = true;\r\n        this.subscribeElementUpdateFn(this);\r\n    }\r\n\r\n    /**\r\n     * Switch interactivity off to unsubscribe the instance to the RAF\r\n     * and stop calculations.\r\n     */\r\n    public setInteractivityOff() {\r\n        if (!this.isInteractive) {\r\n            return;\r\n        }\r\n\r\n        this.isInteractive = false;\r\n        this.unsubscribeElementUpdateFn(this);\r\n\r\n        // Force progress to progress limit when the element is out\r\n        this.lastProgress != null &&\r\n            this._computeProgress(closestNumber([0, 1], this.lastProgress));\r\n    }\r\n\r\n    /**\r\n     * Resize method that compute the element's values.\r\n     *\r\n     * @private\r\n     */\r\n    private _resize() {\r\n        this.metrics.bcr = this.$el.getBoundingClientRect();\r\n        this._computeMetrics();\r\n        this._computeIntersection();\r\n\r\n        // First resize logic\r\n        if (this.isFirstResize) {\r\n            this.isFirstResize = false;\r\n            // Dispatch default call if the element is in fold.\r\n            if (this.isInFold) {\r\n                this.setInview();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Compute element's offsets and determine if the element is in fold.\r\n     *\r\n     * @private\r\n     */\r\n    private _computeMetrics() {\r\n        const { top, left, height, width } = this.metrics.bcr;\r\n        const wSize =\r\n            this.scrollOrientation === 'vertical'\r\n                ? window.innerHeight\r\n                : window.innerWidth;\r\n        const metricsStart = this.scrollOrientation === 'vertical' ? top : left;\r\n        const metricsSize =\r\n            this.scrollOrientation === 'vertical' ? height : width;\r\n\r\n        this.metrics.offsetStart =\r\n            this.currentScroll + metricsStart - this.translateValue;\r\n        this.metrics.offsetEnd = this.metrics.offsetStart + metricsSize;\r\n\r\n        if (\r\n            this.metrics.offsetStart < wSize &&\r\n            !this.attributes.scrollIgnoreFold\r\n        ) {\r\n            this.isInFold = true;\r\n        } else {\r\n            this.isInFold = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Compute intersection values depending on the context.\r\n     *\r\n     * @private\r\n     */\r\n    private _computeIntersection() {\r\n        // Window size\r\n        const wSize =\r\n            this.scrollOrientation === 'vertical'\r\n                ? window.innerHeight\r\n                : window.innerWidth;\r\n\r\n        // Metrics size\r\n        const metricsSize =\r\n            this.scrollOrientation === 'vertical'\r\n                ? this.metrics.bcr.height\r\n                : this.metrics.bcr.width;\r\n\r\n        // Offset\r\n        const offset = this.attributes.scrollOffset.split(',');\r\n        const offsetStart = offset[0] != undefined ? offset[0].trim() : '0';\r\n        const offsetEnd = offset[1] != undefined ? offset[1].trim() : '0';\r\n\r\n        // Positions\r\n        const scrollPosition = this.attributes.scrollPosition.split(',');\r\n        let scrollPositionStart =\r\n            scrollPosition[0] != undefined ? scrollPosition[0].trim() : 'start';\r\n        const scrollPositionEnd =\r\n            scrollPosition[1] != undefined ? scrollPosition[1].trim() : 'end';\r\n\r\n        // Viewport\r\n        const viewportStart = offsetStart.includes('%')\r\n            ? wSize * parseInt(offsetStart.replace('%', '').trim()) * 0.01\r\n            : parseInt(offsetStart);\r\n        const viewportEnd = offsetEnd.includes('%')\r\n            ? wSize * parseInt(offsetEnd.replace('%', '').trim()) * 0.01\r\n            : parseInt(offsetEnd);\r\n\r\n        // Fold exception\r\n        if (this.isInFold) {\r\n            scrollPositionStart = 'fold';\r\n        }\r\n\r\n        // Define Intersection Start\r\n        switch (scrollPositionStart) {\r\n            case 'start':\r\n                this.intersection.start =\r\n                    this.metrics.offsetStart - wSize + viewportStart;\r\n                break;\r\n\r\n            case 'middle':\r\n                this.intersection.start =\r\n                    this.metrics.offsetStart -\r\n                    wSize +\r\n                    viewportStart +\r\n                    metricsSize * 0.5;\r\n                break;\r\n\r\n            case 'end':\r\n                this.intersection.start =\r\n                    this.metrics.offsetStart -\r\n                    wSize +\r\n                    viewportStart +\r\n                    metricsSize;\r\n                break;\r\n\r\n            case 'fold':\r\n                this.intersection.start = 0;\r\n                break;\r\n\r\n            default:\r\n                this.intersection.start =\r\n                    this.metrics.offsetStart - wSize + viewportStart;\r\n                break;\r\n        }\r\n\r\n        // Define Intersection End\r\n        switch (scrollPositionEnd) {\r\n            case 'start':\r\n                this.intersection.end = this.metrics.offsetStart - viewportEnd;\r\n                break;\r\n\r\n            case 'middle':\r\n                this.intersection.end =\r\n                    this.metrics.offsetStart - viewportEnd + metricsSize * 0.5;\r\n                break;\r\n\r\n            case 'end':\r\n                this.intersection.end =\r\n                    this.metrics.offsetStart - viewportEnd + metricsSize;\r\n                break;\r\n\r\n            default:\r\n                this.intersection.end =\r\n                    this.metrics.offsetStart - viewportEnd + metricsSize;\r\n                break;\r\n        }\r\n\r\n        // Avoid to have the end < the start intersection >\r\n        if (this.intersection.end <= this.intersection.start) {\r\n            switch (scrollPositionEnd) {\r\n                case 'start':\r\n                    this.intersection.end = this.intersection.start + 1;\r\n                    break;\r\n\r\n                case 'middle':\r\n                    this.intersection.end =\r\n                        this.intersection.start + metricsSize * 0.5;\r\n                    break;\r\n\r\n                case 'end':\r\n                    this.intersection.end =\r\n                        this.intersection.start + metricsSize;\r\n                    break;\r\n\r\n                default:\r\n                    this.intersection.end = this.intersection.start + 1;\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Compute the scroll progress of the element depending\r\n     * on its intersection values.\r\n     *\r\n     * @private\r\n     *\r\n     * @param {number} [forcedProgress] - Value to force progress.\r\n     */\r\n    private _computeProgress(forcedProgress?: number) {\r\n        // Progress\r\n        const progress =\r\n            forcedProgress ??\r\n            clamp(\r\n                0,\r\n                1,\r\n                normalize(\r\n                    this.intersection.start,\r\n                    this.intersection.end,\r\n                    this.currentScroll\r\n                )\r\n            );\r\n\r\n        this.progress = progress;\r\n\r\n        if (progress != this.lastProgress) {\r\n            this.lastProgress = progress;\r\n\r\n            // Set the element's progress to the css variable\r\n            this.attributes.scrollCssProgress && this._setCssProgress(progress);\r\n\r\n            // Set the element's progress to the custom event listeners\r\n            this.attributes.scrollEventProgress &&\r\n                this._setCustomEventProgress(progress);\r\n\r\n            // Set the element's progress to inline modules\r\n            if (this.attributes.scrollModuleProgress) {\r\n                for (const modularModules of this.progressModularModules) {\r\n                    this.modularInstance &&\r\n                        this.modularInstance.call(\r\n                            PROGRESS_MODULAR_METHOD,\r\n                            progress,\r\n                            modularModules.moduleName,\r\n                            modularModules.moduleId\r\n                        );\r\n                }\r\n            }\r\n\r\n            // Logic to trigger the inview/out of view callbacks\r\n            progress > 0 && progress < 1 && this.setInview();\r\n            progress === 0 && this.setOutOfView();\r\n            progress === 1 && this.setOutOfView();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the element's progress to a specific css variable.\r\n     *\r\n     * @private\r\n     *\r\n     * @param {number} [currentProgress] - Progress value.\r\n     */\r\n    _setCssProgress(currentProgress = 0) {\r\n        this.$el.style.setProperty(\r\n            PROGRESS_CSS_VAR,\r\n            currentProgress.toString()\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Set the element's progress to the custom event listeners.\r\n     *\r\n     * @private\r\n     *\r\n     * @param {number} [currentProgress] - Progress value.\r\n     */\r\n    _setCustomEventProgress(currentProgress = 0) {\r\n        const customEventName = this.attributes.scrollEventProgress;\r\n\r\n        if (!customEventName) return;\r\n\r\n        const customEvent = new CustomEvent(customEventName, {\r\n            detail: {\r\n                target: this.$el,\r\n                progress: currentProgress,\r\n            },\r\n        });\r\n        window.dispatchEvent(customEvent);\r\n    }\r\n\r\n    /**\r\n     * Get modular modules that can listen the element's progress.\r\n     *\r\n     * @private\r\n     */\r\n    _getProgressModularModules() {\r\n        if (!this.modularInstance) {\r\n            return;\r\n        }\r\n\r\n        const modulesIdNames = Object.keys(this.$el.dataset).filter((key) =>\r\n            key.includes('module')\r\n        );\r\n        const modules: any[] = Object.entries(this.modularInstance.modules);\r\n\r\n        if (!modulesIdNames.length) {\r\n            return;\r\n        }\r\n\r\n        for (const modulesIdName of modulesIdNames) {\r\n            const moduleId = this.$el.dataset[modulesIdName];\r\n\r\n            if (!moduleId) {\r\n                return;\r\n            }\r\n\r\n            for (const module of modules) {\r\n                const [moduleName, moduleObj] = module;\r\n\r\n                if (moduleId in moduleObj) {\r\n                    this.progressModularModules.push({\r\n                        moduleName,\r\n                        moduleId,\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Function to get scroll call from.\r\n     *\r\n     * @private\r\n     */\r\n    _getScrollCallFrom(): scrollCallFrom {\r\n        const closestIntersectionValue = closestNumber(\r\n            [this.intersection.start, this.intersection.end],\r\n            this.currentScroll\r\n        );\r\n        return this.intersection.start === closestIntersectionValue\r\n            ? 'start'\r\n            : 'end';\r\n    }\r\n\r\n    /**\r\n     * Function to dispatch a custom event or call a modular callback.\r\n     *\r\n     * @private\r\n     *\r\n     * @param {scrollCallWay} way - Enter or leave.\r\n     * @param {scrollCallFrom} from - Start or end.\r\n     */\r\n    _dispatchCall(way: scrollCallWay, from: scrollCallFrom) {\r\n        const callParameters = this.attributes.scrollCall?.split(',');\r\n        const callSelf = this.attributes?.scrollCallSelf;\r\n\r\n        if (callParameters && callParameters.length > 1) {\r\n            // Using Modular.js (https://github.com/modularorg/modularjs)\r\n            const [func, moduleName, moduleId] = callParameters;\r\n            let targetModuleId;\r\n\r\n            // If the module is set on the scroll element\r\n            if (callSelf) {\r\n                targetModuleId = this.$el.dataset[`module${moduleName.trim()}`];\r\n            } else {\r\n                targetModuleId = moduleId;\r\n            }\r\n\r\n            this.modularInstance &&\r\n                this.modularInstance.call(\r\n                    func.trim(),\r\n                    {\r\n                        target: this.$el,\r\n                        way,\r\n                        from,\r\n                    },\r\n                    moduleName.trim(),\r\n                    targetModuleId?.trim()\r\n                );\r\n        } else if (callParameters) {\r\n            // Using CustomEvent API (https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent)\r\n            const [customEventName] = callParameters;\r\n            const customEvent = new CustomEvent(customEventName, {\r\n                detail: {\r\n                    target: this.$el,\r\n                    way,\r\n                    from,\r\n                },\r\n            });\r\n            window.dispatchEvent(customEvent);\r\n        }\r\n    }\r\n}\r\n","/**\r\n * Integrates Lenis with Locomotive's built-in animation system\r\n */\r\n\r\nimport type {\r\n    CoreOptions,\r\n    IModular,\r\n    IScrollElementCallbacksValues,\r\n    scrollOrientation,\r\n} from '../types';\r\nimport IO from './IO';\r\nimport ScrollElement from './ScrollElement';\r\n\r\n/** Defined attributes that need a requestAnimationFrame */\r\nconst ATTRIBUTES_THAT_NEED_RAF = [\r\n    'scrollOffset',\r\n    'scrollPosition',\r\n    'scrollModuleProgress',\r\n    'scrollCssProgress',\r\n    'scrollEventProgress',\r\n    'scrollSpeed',\r\n];\r\n\r\n/** Default root margins */\r\nconst TRIGGER_ROOT_MARGIN = '-1px -1px -1px -1px';\r\nconst RAF_ROOT_MARGIN = '100% 100% 100% 100%'; // Add 100vh top/bottom && 100vw left/right to use a biggest value with data-scroll-speed\r\n\r\nexport default class Core {\r\n    private $scrollContainer!: HTMLElement;\r\n    private modularInstance?: IModular;\r\n    private triggerRootMargin!: string;\r\n    private rafRootMargin!: string;\r\n    private scrollElements!: ScrollElement[];\r\n    private triggeredScrollElements!: ScrollElement[];\r\n    private RAFScrollElements!: ScrollElement[];\r\n    private scrollElementsToUpdate!: ScrollElement[];\r\n    private IOTriggerInstance!: IO;\r\n    private IORafInstance!: IO;\r\n    private scrollOrientation!: scrollOrientation;\r\n\r\n    constructor({\r\n        $el,\r\n        modularInstance,\r\n        triggerRootMargin,\r\n        rafRootMargin,\r\n        scrollOrientation,\r\n    }: CoreOptions) {\r\n        if (!$el) {\r\n            console.error('Please provide a DOM Element as scrollContainer');\r\n            return;\r\n        }\r\n\r\n        // Scroll container\r\n        this.$scrollContainer = $el;\r\n\r\n        // Modular.js\r\n        this.modularInstance = modularInstance;\r\n\r\n        // Scroll Direction\r\n        this.scrollOrientation = scrollOrientation;\r\n\r\n        // IO Margins\r\n        this.triggerRootMargin = triggerRootMargin ?? TRIGGER_ROOT_MARGIN;\r\n        this.rafRootMargin = rafRootMargin ?? RAF_ROOT_MARGIN;\r\n\r\n        // ScrollElements arrays\r\n        this.scrollElements = [];\r\n        this.triggeredScrollElements = [];\r\n        this.RAFScrollElements = [];\r\n        this.scrollElementsToUpdate = [];\r\n\r\n\r\n        // Init\r\n        this._init();\r\n    }\r\n\r\n    /**\r\n     * Lifecyle - Initialize the core.\r\n     *\r\n     * @private\r\n     */\r\n    private _init() {\r\n        const $scrollElements =\r\n            this.$scrollContainer.querySelectorAll('[data-scroll]');\r\n\r\n        const $scrollElementsArr = Array.from($scrollElements) as HTMLElement[]\r\n        this._subscribeScrollElements($scrollElementsArr);\r\n\r\n        // Trigger IO\r\n        this.IOTriggerInstance = new IO({\r\n            scrollElements: [...this.triggeredScrollElements],\r\n            rootMargin: this.triggerRootMargin,\r\n            IORaf: false,\r\n        });\r\n\r\n        // Raf IO\r\n        this.IORafInstance = new IO({\r\n            scrollElements: [...this.RAFScrollElements],\r\n            rootMargin: this.rafRootMargin,\r\n            IORaf: true,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Lifecyle - Destroy core.\r\n     */\r\n    public destroy() {\r\n        this.IOTriggerInstance.destroy();\r\n        this.IORafInstance.destroy();\r\n        this._unsubscribeAllScrollElements();\r\n    }\r\n\r\n    /**\r\n     * Callback - Resize callback.\r\n     */\r\n    onResize({ currentScroll }: IScrollElementCallbacksValues) {\r\n        for (const scrollElement of this.RAFScrollElements) {\r\n            scrollElement.onResize({\r\n                currentScroll,\r\n            } as IScrollElementCallbacksValues);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback - RAF callback.\r\n     */\r\n    onRender({ currentScroll, smooth }: IScrollElementCallbacksValues) {\r\n        for (const scrollElement of this.scrollElementsToUpdate) {\r\n            scrollElement.onRender({\r\n                currentScroll,\r\n                smooth,\r\n            } as IScrollElementCallbacksValues);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove items from lists of scroll elements and compute all new values.\r\n     *\r\n     * @param {HTMLElement} $oldContainer - HTMLElement that contains data-scroll elements to unsubscribe\r\n     */\r\n    removeScrollElements($oldContainer: HTMLElement) {\r\n        const $scrollElementsToRemove =\r\n            $oldContainer.querySelectorAll('[data-scroll]');\r\n\r\n        if (!$scrollElementsToRemove.length) return;\r\n\r\n        // 1. Remove from IO\r\n        for (let index = 0; index < this.triggeredScrollElements.length; index++) {\r\n            const scrollElement = this.triggeredScrollElements[index];\r\n            const $scrollElementsToRemoveArr = Array.from($scrollElementsToRemove) as HTMLElement []\r\n            if ($scrollElementsToRemoveArr.indexOf(scrollElement.$el) > -1) {\r\n                this.IOTriggerInstance.unobserve(scrollElement.$el);\r\n                this.triggeredScrollElements.splice(index, 1);\r\n            }\r\n        }\r\n\r\n        for (let index = 0; index < this.RAFScrollElements.length; index++) {\r\n            const scrollElement = this.RAFScrollElements[index];\r\n            const $scrollElementsToRemoveArr = Array.from($scrollElementsToRemove) as HTMLElement []\r\n            if ($scrollElementsToRemoveArr.indexOf(scrollElement.$el) > -1) {\r\n                this.IORafInstance.unobserve(scrollElement.$el);\r\n                this.RAFScrollElements.splice(index, 1);\r\n            }\r\n        }\r\n\r\n        // 2. Remove from scrollElementsToUpdate[] and scrollElements[]\r\n        $scrollElementsToRemove.forEach(($scrollElement) => {\r\n            const targetScrollElementToUpdate =\r\n                this.scrollElementsToUpdate.find(\r\n                    (scrollElement) => scrollElement.$el === $scrollElement\r\n                );\r\n            const targetScrollElement = this.scrollElements.find(\r\n                (scrollElement) => scrollElement.$el === $scrollElement\r\n            );\r\n\r\n            if (targetScrollElementToUpdate) {\r\n                this._unsubscribeElementUpdate(targetScrollElementToUpdate);\r\n            }\r\n            if (targetScrollElement) {\r\n                this.scrollElements = this.scrollElements.filter(\r\n                    (scrollElementItem) =>\r\n                        scrollElementItem.id != targetScrollElement.id\r\n                );\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Add items to lists of scroll elements and compute all new values.\r\n     *\r\n     * @param {HTMLElement} $newContainer - HTMLElement that contains data-scroll elements to subscribe\r\n     */\r\n    addScrollElements($newContainer: HTMLElement) {\r\n        // 3. Rebuild ScrollElements\r\n        const $scrollElements = $newContainer.querySelectorAll('[data-scroll]');\r\n\r\n        // 4. Get max scrollElement.id\r\n        const ids: number[] = [];\r\n        this.scrollElements.forEach((scrollElement) => {\r\n            ids.push(scrollElement.id);\r\n        });\r\n        const maxID = Math.max(...ids, 0);\r\n        const fromIndex = maxID + 1;\r\n        const $scrollElementsArr = Array.from($scrollElements) as HTMLElement[]\r\n        this._subscribeScrollElements(\r\n            $scrollElementsArr,\r\n            fromIndex,\r\n            true\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Create a ScrollElement instance for each elements with\r\n     * `data-scroll` attribute.\r\n     *\r\n     * @private\r\n     *\r\n     * @param {HTMLElement[]} $scrollElements - List of elements that need\r\n     *     to be regarded.\r\n     */\r\n    _subscribeScrollElements(\r\n        $scrollElements: HTMLElement[],\r\n        fromIndex = 0,\r\n        toObserve = false\r\n    ) {\r\n        // For each scroll element create a ScrollElement instance\r\n        for (let index = 0; index < $scrollElements.length; index++) {\r\n            const $scrollElement = $scrollElements[index];\r\n            const needRaf = this._checkRafNeeded($scrollElement);\r\n\r\n            const scrollElementInstance = new ScrollElement({\r\n                $el: $scrollElement,\r\n                id: fromIndex + index,\r\n                scrollOrientation: this.scrollOrientation,\r\n                modularInstance: this.modularInstance,\r\n                subscribeElementUpdateFn:\r\n                    this._subscribeElementUpdate.bind(this),\r\n                unsubscribeElementUpdateFn:\r\n                    this._unsubscribeElementUpdate.bind(this),\r\n                needRaf,\r\n            });\r\n\r\n            // Push to common array\r\n            this.scrollElements.push(scrollElementInstance);\r\n\r\n            // Push to specific array\r\n            if (needRaf) {\r\n                this.RAFScrollElements.push(scrollElementInstance);\r\n\r\n                // Dynamic observe item\r\n                if (toObserve) {\r\n                    this.IORafInstance.scrollElements.push(\r\n                        scrollElementInstance\r\n                    );\r\n                    this.IORafInstance.observe(scrollElementInstance.$el);\r\n                }\r\n            } else {\r\n                this.triggeredScrollElements.push(scrollElementInstance);\r\n\r\n                // Dynamic observe item\r\n                if (toObserve) {\r\n                    this.IOTriggerInstance.scrollElements.push(\r\n                        scrollElementInstance\r\n                    );\r\n                    this.IOTriggerInstance.observe(scrollElementInstance.$el);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clear all ScrollElement arrays.\r\n     *\r\n     * @private\r\n     */\r\n    _unsubscribeAllScrollElements() {\r\n        this.scrollElements = [];\r\n        this.RAFScrollElements = [];\r\n        this.triggeredScrollElements = [];\r\n        this.scrollElementsToUpdate = [];\r\n    }\r\n\r\n    /**\r\n     * Subscribe ScrollElement instance that needs to be updated.\r\n     *\r\n     * @private\r\n     *\r\n     * @param {ScrollElement} scrollElement - ScrollElement instance inview\r\n     *     that needs to be updated.\r\n     */\r\n    _subscribeElementUpdate(scrollElement: ScrollElement) {\r\n        this.scrollElementsToUpdate.push(scrollElement);\r\n    }\r\n\r\n    /**\r\n     * Unscribe ScrollElement instance that doesn't need to be updated.\r\n     *\r\n     * @private\r\n     *\r\n     * @param {ScrollElement} scrollElement - The updated ScrollElement instance\r\n     *     out of view now.\r\n     */\r\n    _unsubscribeElementUpdate(scrollElement: ScrollElement) {\r\n        this.scrollElementsToUpdate = this.scrollElementsToUpdate.filter(\r\n            (scrollElementToUpdate) =>\r\n                scrollElementToUpdate.id != scrollElement.id\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Check if a DOM Element need a requestAnimationFrame to be used.\r\n     *\r\n     * @private\r\n     *\r\n     * @param {HTMLElement} $scrollElement - The element that needs to be checked.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    _checkRafNeeded($scrollElement: HTMLElement) {\r\n        let attributesThatNeedRaf = [...ATTRIBUTES_THAT_NEED_RAF];\r\n\r\n        // Remove utils\r\n        const removeAttribute = (attributeToRemove: string) => {\r\n            attributesThatNeedRaf = attributesThatNeedRaf.filter(\r\n                (attribute) => attribute != attributeToRemove\r\n            );\r\n        };\r\n\r\n        // 1. Check scroll offset values\r\n        if ($scrollElement.dataset.scrollOffset) {\r\n            const value = $scrollElement.dataset.scrollOffset\r\n                .split(',')\r\n                .map((test) => test.replace('%', '').trim())\r\n                .join(',');\r\n            if (value != '0,0') {\r\n                return true;\r\n            } else {\r\n                removeAttribute('scrollOffset');\r\n            }\r\n        } else {\r\n            removeAttribute('scrollOffset');\r\n        }\r\n\r\n        // 2. Check scroll position values\r\n        if ($scrollElement.dataset.scrollPosition) {\r\n            const value = $scrollElement.dataset.scrollPosition.trim();\r\n            if (value != 'top,bottom') {\r\n                return true;\r\n            } else {\r\n                removeAttribute('scrollPosition');\r\n            }\r\n        } else {\r\n            removeAttribute('scrollPosition');\r\n        }\r\n\r\n        // 3. Check scroll speed values\r\n        if (\r\n            $scrollElement.dataset.scrollSpeed &&\r\n            !isNaN(parseFloat($scrollElement.dataset.scrollSpeed))\r\n        ) {\r\n            return true;\r\n        } else {\r\n            removeAttribute('scrollSpeed');\r\n        }\r\n\r\n        // 4. Check others attributes\r\n        for (const attribute of attributesThatNeedRaf) {\r\n            if (attribute in $scrollElement.dataset) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n","/**\r\n * Resize Observer\r\n *\r\n * The Resize Observer API provides a performant mechanism by which code can monitor an element for changes to its size,\r\n * with notifications being delivered to the observer each time the size changes.\r\n *\r\n * Features functions to:\r\n *\r\n * - Trigger the resize callback if the specified element's size change.\r\n *\r\n * References:\r\n *\r\n * - {@link https://developer.mozilla.org/en-US/docs/Web/API/Resize_Observer_API}\r\n */\r\n\r\nimport type { IROOptions } from '../types';\r\n\r\nexport default class RO {\r\n    private $resizeElements: HTMLElement[];\r\n    private isFirstObserve: boolean;\r\n    private observer!: ResizeObserver;\r\n    private resizeCallback: () => void;\r\n\r\n    constructor({ resizeElements, resizeCallback = () => {} }: IROOptions) {\r\n        // Parameters\r\n        this.$resizeElements = resizeElements;\r\n        this.resizeCallback = resizeCallback;\r\n\r\n        // Flags\r\n        this.isFirstObserve = true;\r\n\r\n        // Init\r\n        this._init();\r\n    }\r\n\r\n    /**\r\n     * Lifecyle - Initialize Resize Observer.\r\n     *\r\n     * @private\r\n     */\r\n    private _init() {\r\n        // Callback\r\n        const onResize = (entries: ResizeObserverEntry[]) => {\r\n            !this.isFirstObserve && this.resizeCallback?.();\r\n            this.isFirstObserve = false;\r\n        };\r\n\r\n        // Instance\r\n        this.observer = new ResizeObserver(onResize);\r\n\r\n        // Observe each default elements\r\n        for (const $resizeElement of this.$resizeElements) {\r\n            this.observer.observe($resizeElement);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Lifecyle - Destroy Resize Observer.\r\n     */\r\n    public destroy() {\r\n        this.observer.disconnect();\r\n    }\r\n}\r\n","//@ts-ignore\r\nimport Lenis from 'lenis';\r\nimport Core from './core/Core';\r\nimport RO from './core/RO';\r\nimport type {\r\n    ILenisScrollToOptions,\r\n    ILenisScrollValues,\r\n    ILocomotiveScrollOptions,\r\n    IModular,\r\n    lenisTargetScrollTo,\r\n} from './types';\r\nimport type { LenisOptions } from 'lenis';\r\n\r\n/**\r\n * Locomotive Scroll\r\n *\r\n * Detection of elements in viewport & smooth scrolling with parallax.\r\n *\r\n * Inspired by\r\n * {@link https://github.com/locomotivemtl/locomotive-scroll locomotive-scroll.js}\r\n * and built around\r\n * {@link https://github.com/darkroomengineering/lenis lenis.js}.\r\n */\r\n\r\nexport default class LocomotiveScroll {\r\n    public rafPlaying: boolean;\r\n    public lenisInstance: any;\r\n\r\n    private coreInstance: any;\r\n\r\n    private lenisOptions?: LenisOptions;\r\n    private modularInstance?: IModular;\r\n    private triggerRootMargin?: string;\r\n    private rafRootMargin?: string;\r\n    private rafInstance?: any;\r\n    private autoResize?: boolean;\r\n    private autoStart?: boolean;\r\n    private ROInstance?: RO;\r\n    private scrollCallback?(scrollValues: ILenisScrollValues): void;\r\n    private initCustomTicker?: (render: () => void) => void;\r\n    private destroyCustomTicker?: (render: () => void) => void;\r\n    private _onRenderBind: () => void;\r\n    private _onResizeBind: () => void;\r\n    private _onScrollToBind: (event: MouseEvent) => void;\r\n\r\n    constructor({\r\n        lenisOptions = {},\r\n        modularInstance,\r\n        triggerRootMargin,\r\n        rafRootMargin,\r\n        autoResize = true,\r\n        autoStart = true,\r\n        scrollCallback = () => {},\r\n        initCustomTicker,\r\n        destroyCustomTicker,\r\n    }: ILocomotiveScrollOptions = {}) {\r\n\r\n        for (const [key] of Object.entries(lenisOptions)) {\r\n            if ([\"wrapper\", \"content\", \"infinite\"].includes(key)) {\r\n                console.warn(`Warning: Key \"${key}\" is not possible to edit in Locomotive Scroll.`);\r\n            }\r\n        }\r\n\r\n        // Get arguments\r\n        Object.assign(this, {\r\n            lenisOptions,\r\n            modularInstance,\r\n            triggerRootMargin,\r\n            rafRootMargin,\r\n            autoResize,\r\n            autoStart,\r\n            scrollCallback,\r\n            initCustomTicker,\r\n            destroyCustomTicker,\r\n        });\r\n\r\n\r\n        // Binding\r\n        this._onRenderBind = this._onRender.bind(this);\r\n        this._onScrollToBind = this._onScrollTo.bind(this);\r\n        this._onResizeBind = this._onResize.bind(this);\r\n\r\n        // Data\r\n        this.rafPlaying = false;\r\n\r\n        // Init\r\n        this._init();\r\n    }\r\n\r\n    /**\r\n     * Lifecyle - Initialize instance.\r\n     *\r\n     * @private\r\n     */\r\n    private _init(): void {\r\n        // Create Lenis instance\r\n        this.lenisInstance = new Lenis({\r\n            ...this.lenisOptions,\r\n            wrapper: window,\r\n            content: document.documentElement,\r\n            infinite: false\r\n        });\r\n        this.lenisInstance?.on('scroll', this.scrollCallback);\r\n\r\n        // Add scroll direction attribute on body\r\n        document.documentElement.setAttribute(\r\n            'data-scroll-orientation',\r\n            this.lenisInstance.options.orientation\r\n        );\r\n\r\n        requestAnimationFrame(() => {\r\n            // Create Core Instance\r\n            this.coreInstance = new Core({\r\n                $el: this.lenisInstance.rootElement,\r\n                modularInstance: this.modularInstance,\r\n                triggerRootMargin: this.triggerRootMargin,\r\n                rafRootMargin: this.rafRootMargin,\r\n                scrollOrientation: this.lenisInstance.options.orientation,\r\n            });\r\n\r\n            // Bind Events\r\n            this._bindEvents();\r\n\r\n            // RAF warning\r\n            if (this.initCustomTicker && !this.destroyCustomTicker) {\r\n                console.warn(\r\n                    'initCustomTicker callback is declared, but destroyCustomTicker is not. Please pay attention. It could cause trouble.'\r\n                );\r\n            } else if (!this.initCustomTicker && this.destroyCustomTicker) {\r\n                console.warn(\r\n                    'destroyCustomTicker callback is declared, but initCustomTicker is not. Please pay attention. It could cause trouble.'\r\n                );\r\n            }\r\n\r\n            // Start RAF\r\n            this.autoStart && this.start();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Lifecyle - Destroy instance.\r\n     */\r\n    public destroy(): void {\r\n        // Stop raf\r\n        this.stop();\r\n        // Unbind Events\r\n        this._unbindEvents();\r\n        // Destroy Lenis\r\n        this.lenisInstance.destroy();\r\n        // Destroy Core\r\n        this.coreInstance?.destroy();\r\n\r\n        // Ensure a delay before destroying to handle cases of instant destruction\r\n        requestAnimationFrame(() => {\r\n            this.coreInstance?.destroy();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Events - Subscribe events to listen.\r\n     */\r\n    private _bindEvents() {\r\n        this._bindScrollToEvents();\r\n\r\n        if (this.autoResize) {\r\n            if ('ResizeObserver' in window) {\r\n                this.ROInstance = new RO({\r\n                    resizeElements: [document.body],\r\n                    resizeCallback: this._onResizeBind,\r\n                });\r\n            } else {\r\n                (window as any).addEventListener('resize', this._onResizeBind);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Events - Unsubscribe listened events.\r\n     */\r\n    private _unbindEvents() {\r\n        this._unbindScrollToEvents();\r\n\r\n        if (this.autoResize) {\r\n            if ('ResizeObserver' in window) {\r\n                this.ROInstance && this.ROInstance.destroy();\r\n            } else {\r\n                (window as any).removeEventListener(\r\n                    'resize',\r\n                    this._onResizeBind\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Events - Subscribe scrollTo events to listen.\r\n     */\r\n    private _bindScrollToEvents($container?: HTMLElement) {\r\n        const $rootContainer = $container\r\n            ? $container\r\n            : this.lenisInstance.rootElement;\r\n        const $scrollToElements =\r\n            $rootContainer?.querySelectorAll('[data-scroll-to]');\r\n\r\n        $scrollToElements?.length &&\r\n            $scrollToElements.forEach(($el: HTMLElement): void => {\r\n                $el.addEventListener('click', this._onScrollToBind, false);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Events - Unsubscribe scrollTo listened events.\r\n     */\r\n    private _unbindScrollToEvents($container?: HTMLElement) {\r\n        const $rootContainer = $container\r\n            ? $container\r\n            : this.lenisInstance.rootElement;\r\n        const $scrollToElements =\r\n            $rootContainer?.querySelectorAll('[data-scroll-to]');\r\n        $scrollToElements?.length &&\r\n            $scrollToElements.forEach(($el: HTMLElement) => {\r\n                $el.removeEventListener('click', this._onScrollToBind, false);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Callback - Resize callback.\r\n     */\r\n    private _onResize() {\r\n        // Waiting the next frame to get the new current scroll value return by Lenis\r\n        requestAnimationFrame(() => {\r\n            this.coreInstance?.onResize({\r\n                currentScroll: this.lenisInstance.scroll,\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Callback - Render callback.\r\n     */\r\n    private _onRender() {\r\n        this.lenisInstance?.raf(Date.now());\r\n\r\n        this.coreInstance?.onRender({\r\n            currentScroll: this.lenisInstance.scroll,\r\n            smooth: this.lenisInstance.options.smoothWheel,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Callback - Scroll To callback.\r\n     */\r\n    private _onScrollTo(event: MouseEvent) {\r\n        event.preventDefault();\r\n        const $target = (event.currentTarget as HTMLElement) ?? null;\r\n        if (!$target) return;\r\n        const target =\r\n            $target.getAttribute('data-scroll-to-href') ||\r\n            $target.getAttribute('href');\r\n        const offset = $target.getAttribute('data-scroll-to-offset') || 0;\r\n        const duration =\r\n            $target.getAttribute('data-scroll-to-duration') ||\r\n            this.lenisInstance.options.duration\r\n        target &&\r\n            this.scrollTo(target, {\r\n                offset: typeof offset === 'string' ? parseInt(offset) : offset,\r\n                duration:\r\n                    typeof duration === 'string'\r\n                        ? parseInt(duration)\r\n                        : duration,\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Start RequestAnimationFrame that active Lenis smooth and scroll progress.\r\n     */\r\n    public start(): void {\r\n        if (this.rafPlaying) {\r\n            return;\r\n        }\r\n\r\n        // Call lenis start method\r\n        this.lenisInstance?.start();\r\n\r\n        this.rafPlaying = true;\r\n        this.initCustomTicker\r\n            ? this.initCustomTicker(this._onRenderBind)\r\n            : this._raf();\r\n    }\r\n\r\n    /**\r\n     * Stop RequestAnimationFrame that active Lenis smooth and scroll progress.\r\n     */\r\n    public stop(): void {\r\n        if (!this.rafPlaying) {\r\n            return;\r\n        }\r\n\r\n        // Call lenis stop method\r\n        this.lenisInstance?.stop();\r\n\r\n        this.rafPlaying = false;\r\n        this.destroyCustomTicker\r\n            ? this.destroyCustomTicker(this._onRenderBind)\r\n            : this.rafInstance && cancelAnimationFrame(this.rafInstance);\r\n    }\r\n\r\n    /**\r\n     * Remove old scroll elements items and rebuild ScrollElements instances.\r\n     */\r\n    public removeScrollElements($oldContainer: HTMLElement): void {\r\n        if (!$oldContainer) {\r\n            console.error('Please provide a DOM Element as $oldContainer');\r\n            return;\r\n        }\r\n\r\n        this._unbindScrollToEvents($oldContainer);\r\n        this.coreInstance?.removeScrollElements($oldContainer);\r\n    }\r\n\r\n    /**\r\n     * Add new scroll elements items and rebuild ScrollElements instances.\r\n     */\r\n    public addScrollElements($newContainer: HTMLElement): void {\r\n        if (!$newContainer) {\r\n            console.error('Please provide a DOM Element as $newContainer');\r\n            return;\r\n        }\r\n\r\n        this.coreInstance?.addScrollElements($newContainer);\r\n        requestAnimationFrame(() => {\r\n            this._bindScrollToEvents($newContainer);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Trigger resize callback.\r\n     */\r\n    public resize(): void {\r\n        this._onResizeBind();\r\n    }\r\n\r\n    /**\r\n     * Trigger scroll to callback.\r\n     */\r\n    public scrollTo(\r\n        target: lenisTargetScrollTo,\r\n        options?: ILenisScrollToOptions\r\n    ): void {\r\n        this.lenisInstance?.scrollTo(target, {\r\n            offset: options?.offset,\r\n            lerp: options?.lerp,\r\n            duration: options?.duration,\r\n            immediate: options?.immediate,\r\n            lock: options?.lock,\r\n            force: options?.force,\r\n            easing: options?.easing,\r\n            onComplete: options?.onComplete,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * RequestAnimationFrame that active Lenis smooth and scroll progress.\r\n     *\r\n     * @private\r\n     *\r\n     */\r\n    private _raf() {\r\n        this._onRenderBind();\r\n        this.rafInstance = requestAnimationFrame(() => this._raf());\r\n    }\r\n}\r\n\r\nexport * from './types';\r\n"],"names":["IO","_ref","scrollElements","_ref$rootMargin","rootMargin","IORaf","this","observer","_init","_proto","prototype","_this","IntersectionObserver","entries","forEach","entry","$targetItem","find","item","$el","target","isIntersecting","isAlreadyIntersected","_setInview","_setOutOfView","_iterator","_step","_createForOfIteratorHelperLoose","done","observe","value","destroy","disconnect","$scrollElement","unobserve","scrollElement","setInteractivityOn","setInview","setInteractivityOff","setOutOfView","attributes","scrollRepeat","mapRange","inMin","inMax","outMin","outMax","closestNumber","array","reduce","prev","curr","Math","abs","ScrollElement","_this$$el$dataset$scr","_this$$el$dataset$scr2","_this$$el$dataset$scr3","_this$$el$dataset$scr4","_this$$el$dataset$scr5","_this$$el$dataset$scr6","id","modularInstance","subscribeElementUpdateFn","unsubscribeElementUpdateFn","needRaf","scrollOrientation","intersection","metrics","currentScroll","translateValue","progress","lastProgress","progressModularModules","isInview","isInteractive","isInFold","isFirstResize","scrollClass","dataset","scrollOffset","scrollPosition","scrollModuleProgress","scrollCssProgress","scrollEventProgress","scrollSpeed","parseFloat","scrollParallaxSideways","scrollParallaxClamp","scrollCall","scrollCallSelf","scrollIgnoreFold","scrollEnableTouchSpeed","start","end","offsetStart","offsetEnd","bcr","window","scrollY","scrollX","_getProgressModularModules","_resize","onResize","_ref2","onRender","_ref3","smooth","wSize","innerHeight","innerWidth","_computeProgress","isNaN","max","min","style","transform","classList","add","from","_getScrollCallFrom","_dispatchCall","remove","getBoundingClientRect","_computeMetrics","_computeIntersection","_this$metrics$bcr","metricsSize","height","width","top","left","offset","split","undefined","trim","scrollPositionStart","scrollPositionEnd","viewportStart","includes","parseInt","replace","viewportEnd","forcedProgress","_setCssProgress","_setCustomEventProgress","modularModules","call","moduleName","moduleId","currentProgress","setProperty","toString","customEventName","customEvent","CustomEvent","detail","dispatchEvent","modulesIdNames","Object","keys","filter","key","modules","length","_iterator2","_step2","_step3","_iterator3","module","push","closestIntersectionValue","way","_this$attributes$scro","_this$attributes","callParameters","callSelf","_targetModuleId","targetModuleId","func","ATTRIBUTES_THAT_NEED_RAF","Core","triggerRootMargin","rafRootMargin","$scrollContainer","triggeredScrollElements","RAFScrollElements","scrollElementsToUpdate","IOTriggerInstance","IORafInstance","console","error","$scrollElements","querySelectorAll","$scrollElementsArr","Array","_subscribeScrollElements","concat","_unsubscribeAllScrollElements","removeScrollElements","$oldContainer","$scrollElementsToRemove","index","indexOf","splice","targetScrollElementToUpdate","targetScrollElement","_unsubscribeElementUpdate","scrollElementItem","addScrollElements","$newContainer","ids","fromIndex","apply","toObserve","_checkRafNeeded","scrollElementInstance","_subscribeElementUpdate","bind","scrollElementToUpdate","attributesThatNeedRaf","removeAttribute","attributeToRemove","attribute","map","test","join","RO","resizeElements","_ref$resizeCallback","resizeCallback","$resizeElements","isFirstObserve","ResizeObserver","LocomotiveScroll","_temp","_ref$lenisOptions","lenisOptions","_ref$autoResize","autoResize","_ref$autoStart","autoStart","_ref$scrollCallback","scrollCallback","initCustomTicker","destroyCustomTicker","rafPlaying","lenisInstance","coreInstance","rafInstance","ROInstance","_onRenderBind","_onResizeBind","_onScrollToBind","_i","_Object$entries","warn","assign","_onRender","_onScrollTo","_onResize","_this$lenisInstance","Lenis","_extends","wrapper","content","document","documentElement","infinite","on","setAttribute","options","orientation","requestAnimationFrame","rootElement","_bindEvents","_this$coreInstance","_this2","stop","_unbindEvents","_this2$coreInstance","_bindScrollToEvents","body","addEventListener","_unbindScrollToEvents","removeEventListener","$container","_this3","$rootContainer","$scrollToElements","_this4","_this5","_this5$coreInstance","scroll","_this$lenisInstance2","_this$coreInstance2","raf","Date","now","smoothWheel","event","_event$currentTarget","preventDefault","$target","currentTarget","getAttribute","duration","scrollTo","_this$lenisInstance3","_raf","_this$lenisInstance4","cancelAnimationFrame","_this$coreInstance3","_this$coreInstance4","_this6","resize","_this$lenisInstance5","lerp","immediate","lock","force","easing","onComplete","_this7"],"mappings":"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"}